var _user$project$Example$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Example$schoolClassSelect = function (schoolClass) {
	return A2(
		_rundis$elm_bootstrap$Bootstrap_Form_Select$item,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(schoolClass.name),
			_1: {ctor: '[]'}
		});
};
var _user$project$Example$schoolSelect = function (school) {
	return A2(
		_rundis$elm_bootstrap$Bootstrap_Form_Select$item,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(school.name),
			_1: {ctor: '[]'}
		});
};
var _user$project$Example$numberSelect = function (number) {
	return A2(
		_rundis$elm_bootstrap$Bootstrap_Form_Select$item,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				_elm_lang$core$Basics$toString(number)),
			_1: {ctor: '[]'}
		});
};
var _user$project$Example$studentView = function (student) {
	var lastname = A2(_elm_lang$core$String$left, 1, student.secondname);
	var firstname = function () {
		var _p0 = _elm_lang$core$List$head(
			A2(_elm_lang$core$String$split, ' ', student.firstname));
		if (_p0.ctor === 'Nothing') {
			return 'No first name';
		} else {
			return _p0._0;
		}
	}();
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('text-center'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'min-width', _1: '120px'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				A2(
					_elm_lang$core$Basics_ops['++'],
					firstname,
					A2(_elm_lang$core$Basics_ops['++'], ' ', lastname))),
			_1: {ctor: '[]'}
		});
};
var _user$project$Example$matrixStudentView = function (student) {
	var lastname = A2(_elm_lang$core$String$left, 1, student.secondname);
	var firstname = function () {
		var _p1 = _elm_lang$core$List$head(
			A2(_elm_lang$core$String$split, ' ', student.firstname));
		if (_p1.ctor === 'Nothing') {
			return 'No first name';
		} else {
			return _p1._0;
		}
	}();
	return A2(
		_rundis$elm_bootstrap$Bootstrap_Grid$col,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				A2(
					_elm_lang$core$Basics_ops['++'],
					firstname,
					A2(_elm_lang$core$Basics_ops['++'], ' ', lastname))),
			_1: {ctor: '[]'}
		});
};
var _user$project$Example$studentTd = function (student) {
	var lastname = A2(_elm_lang$core$String$left, 1, student.secondname);
	var firstname = function () {
		var _p2 = _elm_lang$core$List$head(
			A2(_elm_lang$core$String$split, ' ', student.firstname));
		if (_p2.ctor === 'Nothing') {
			return 'No first name';
		} else {
			return _p2._0;
		}
	}();
	return A2(
		_rundis$elm_bootstrap$Bootstrap_Table$td,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				A2(
					_elm_lang$core$Basics_ops['++'],
					firstname,
					A2(_elm_lang$core$Basics_ops['++'], ' ', lastname))),
			_1: {ctor: '[]'}
		});
};
var _user$project$Example$groupTr = function (group) {
	var color = function () {
		var _p3 = group.color;
		if (_p3.ctor === 'Nothing') {
			return 'white';
		} else {
			return _p3._0;
		}
	}();
	return A2(
		_rundis$elm_bootstrap$Bootstrap_Table$tr,
		{
			ctor: '::',
			_0: _rundis$elm_bootstrap$Bootstrap_Table$rowAttr(
				_elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'background-color', _1: color},
						_1: {ctor: '[]'}
					})),
			_1: {ctor: '[]'}
		},
		A2(_elm_lang$core$List$map, _user$project$Example$studentTd, group.students));
};
var _user$project$Example$matrixGroupView = function (model) {
	return A2(
		_rundis$elm_bootstrap$Bootstrap_Grid$col,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _rundis$elm_bootstrap$Bootstrap_Table$simpleTable(
				{
					ctor: '_Tuple2',
					_0: _rundis$elm_bootstrap$Bootstrap_Table$simpleThead(
						{ctor: '[]'}),
					_1: A2(
						_rundis$elm_bootstrap$Bootstrap_Table$tbody,
						{ctor: '[]'},
						A2(_elm_lang$core$List$map, _user$project$Example$groupTr, model.groups))
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$Example$nonmatrixGroupView = function (group) {
	var color = function () {
		var _p4 = group.color;
		if (_p4.ctor === 'Nothing') {
			return 'white';
		} else {
			return _p4._0;
		}
	}();
	return A2(
		_rundis$elm_bootstrap$Bootstrap_Grid$col,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid black'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'background-color', _1: color},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin-bottom', _1: '10px'},
									_1: {ctor: '[]'}
								}
							}
						}),
					_1: {ctor: '[]'}
				},
				A2(_elm_lang$core$List$map, _user$project$Example$studentView, group.students)),
			_1: {ctor: '[]'}
		});
};
var _user$project$Example$fullClassView = function (model) {
	var _p5 = model.matrix;
	if (_p5 === false) {
		return A2(
			_rundis$elm_bootstrap$Bootstrap_Grid$row,
			{ctor: '[]'},
			A2(_elm_lang$core$List$map, _user$project$Example$nonmatrixGroupView, model.groups));
	} else {
		return A2(
			_rundis$elm_bootstrap$Bootstrap_Grid$row,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _user$project$Example$matrixGroupView(model),
				_1: {ctor: '[]'}
			});
	}
};
var _user$project$Example$schoolClassOptions = function (schoolClass) {
	return A2(
		_elm_lang$html$Html$option,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$value(schoolClass.name),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(schoolClass.name),
			_1: {ctor: '[]'}
		});
};
var _user$project$Example$schoolOptions = function (school) {
	return A2(
		_elm_lang$html$Html$option,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$value(school.name),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(school.name),
			_1: {ctor: '[]'}
		});
};
var _user$project$Example$floatingLeft = {
	ctor: '::',
	_0: {ctor: '_Tuple2', _0: 'float', _1: 'left'},
	_1: {
		ctor: '::',
		_0: {ctor: '_Tuple2', _0: 'padding', _1: '10px'},
		_1: {ctor: '[]'}
	}
};
var _user$project$Example$log = _elm_lang$core$Native_Platform.outgoingPort(
	'log',
	function (v) {
		return v;
	});
var _user$project$Example$SchoolClass = F3(
	function (a, b, c) {
		return {name: a, id: b, schoolId: c};
	});
var _user$project$Example$schoolClassDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'schoolId',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'classId',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'name',
			_elm_lang$core$Json_Decode$string,
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Example$SchoolClass))));
var _user$project$Example$decodeClasses = _elm_lang$core$Json_Decode$list(_user$project$Example$schoolClassDecoder);
var _user$project$Example$School = F2(
	function (a, b) {
		return {name: a, id: b};
	});
var _user$project$Example$schoolDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'schoolId',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'name',
		_elm_lang$core$Json_Decode$string,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Example$School)));
var _user$project$Example$decodeSchools = _elm_lang$core$Json_Decode$list(_user$project$Example$schoolDecoder);
var _user$project$Example$Student = F2(
	function (a, b) {
		return {firstname: a, secondname: b};
	});
var _user$project$Example$studentDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'secondName',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'firstName',
		_elm_lang$core$Json_Decode$string,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Example$Student)));
var _user$project$Example$decodeStudents = _elm_lang$core$Json_Decode$list(_user$project$Example$studentDecoder);
var _user$project$Example$Group = F3(
	function (a, b, c) {
		return {students: a, number: b, color: c};
	});
var _user$project$Example$divideStudentsFixedAmountOfGroups = F4(
	function (colors, index, numberOfGroups, students) {
		var color = A2(
			_elm_lang$core$Array$get,
			index,
			_elm_lang$core$Array$fromList(colors));
		var groups = A2(_elm_lang$core$Basics$max, 1, numberOfGroups);
		var numberOfStudents = _elm_lang$core$Basics$ceiling(
			_elm_lang$core$Basics$toFloat(
				_elm_lang$core$List$length(students)) / groups);
		var _p6 = A2(_elm_lang$core$List$take, numberOfStudents, students);
		if (_p6.ctor === '[]') {
			return {ctor: '[]'};
		} else {
			return {
				ctor: '::',
				_0: A3(_user$project$Example$Group, _p6, index, color),
				_1: A4(
					_user$project$Example$divideStudentsFixedAmountOfGroups,
					colors,
					index + 1,
					groups - 1,
					A2(_elm_lang$core$List$drop, numberOfStudents, students))
			};
		}
	});
var _user$project$Example$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {numberOfGroups: a, selectedSchool: b, selectedSchoolClass: c, debug: d, matrix: e, groups: f, students: g, schoolClasses: h, schools: i, colors: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _user$project$Example$Log = function (a) {
	return {ctor: 'Log', _0: a};
};
var _user$project$Example$RemoveStudent = function (a) {
	return {ctor: 'RemoveStudent', _0: a};
};
var _user$project$Example$studentListItem = function (student) {
	var lastname = A2(_elm_lang$core$String$left, 1, student.secondname);
	var firstname = function () {
		var _p7 = _elm_lang$core$List$head(
			A2(_elm_lang$core$String$split, ' ', student.firstname));
		if (_p7.ctor === 'Nothing') {
			return 'No first name';
		} else {
			return _p7._0;
		}
	}();
	return A2(
		_rundis$elm_bootstrap$Bootstrap_ListGroup$li,
		{
			ctor: '::',
			_0: _rundis$elm_bootstrap$Bootstrap_ListGroup$attrs(
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class('justify-content-between'),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				A2(
					_elm_lang$core$Basics_ops['++'],
					firstname,
					A2(_elm_lang$core$Basics_ops['++'], ' ', lastname))),
			_1: {
				ctor: '::',
				_0: A2(
					_rundis$elm_bootstrap$Bootstrap_Button$button,
					{
						ctor: '::',
						_0: _rundis$elm_bootstrap$Bootstrap_Button$small,
						_1: {
							ctor: '::',
							_0: _rundis$elm_bootstrap$Bootstrap_Button$attrs(
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(
										_user$project$Example$RemoveStudent(student)),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('float-right'),
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('-'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Example$studentList = function (students) {
	return _rundis$elm_bootstrap$Bootstrap_ListGroup$ul(
		A2(_elm_lang$core$List$map, _user$project$Example$studentListItem, students));
};
var _user$project$Example$AssignRandomizedGroup = function (a) {
	return {ctor: 'AssignRandomizedGroup', _0: a};
};
var _user$project$Example$RandomizeGroups = {ctor: 'RandomizeGroups'};
var _user$project$Example$ToggleMatrix = function (a) {
	return {ctor: 'ToggleMatrix', _0: a};
};
var _user$project$Example$SelectMaxStudentsInGroup = function (a) {
	return {ctor: 'SelectMaxStudentsInGroup', _0: a};
};
var _user$project$Example$SelectMinStudentsInGroup = function (a) {
	return {ctor: 'SelectMinStudentsInGroup', _0: a};
};
var _user$project$Example$SelectNumberOfGroups = function (a) {
	return {ctor: 'SelectNumberOfGroups', _0: a};
};
var _user$project$Example$NewStudents = function (a) {
	return {ctor: 'NewStudents', _0: a};
};
var _user$project$Example$getStudents = function (schoolClass) {
	var url = A2(
		_elm_lang$core$Basics_ops['++'],
		'http://localhost:8084/ajax/students?classId=',
		A2(
			_elm_lang$core$Basics_ops['++'],
			schoolClass.id,
			A2(_elm_lang$core$Basics_ops['++'], '&schoolId=', schoolClass.schoolId)));
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Example$NewStudents,
		A2(_elm_lang$http$Http$get, url, _user$project$Example$decodeStudents));
};
var _user$project$Example$FetchStudents = {ctor: 'FetchStudents'};
var _user$project$Example$SelectSchoolClass = function (a) {
	return {ctor: 'SelectSchoolClass', _0: a};
};
var _user$project$Example$NewClasses = function (a) {
	return {ctor: 'NewClasses', _0: a};
};
var _user$project$Example$getClasses = function (school) {
	var url = A2(_elm_lang$core$Basics_ops['++'], 'http://localhost:8084/ajax/classes?schoolId=', school.id);
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Example$NewClasses,
		A2(_elm_lang$http$Http$get, url, _user$project$Example$decodeClasses));
};
var _user$project$Example$FetchClasses = {ctor: 'FetchClasses'};
var _user$project$Example$SelectSchool = function (a) {
	return {ctor: 'SelectSchool', _0: a};
};
var _user$project$Example$NewSchools = function (a) {
	return {ctor: 'NewSchools', _0: a};
};
var _user$project$Example$getSchools = function () {
	var url = 'http://localhost:8084/ajax/schools';
	return A2(
		_elm_lang$http$Http$send,
		_user$project$Example$NewSchools,
		A2(_elm_lang$http$Http$get, url, _user$project$Example$decodeSchools));
}();
var _user$project$Example$init = {
	ctor: '_Tuple2',
	_0: _user$project$Example$Model(1)(_elm_lang$core$Maybe$Nothing)(_elm_lang$core$Maybe$Nothing)('')(false)(
		{ctor: '[]'})(
		{ctor: '[]'})(
		{ctor: '[]'})(
		{ctor: '[]'})(
		{
			ctor: '::',
			_0: '#29c6cd',
			_1: {
				ctor: '::',
				_0: '#f6e4c4',
				_1: {
					ctor: '::',
					_0: '#fea386',
					_1: {
						ctor: '::',
						_0: '#2980b9',
						_1: {
							ctor: '::',
							_0: '#a2d5f2',
							_1: {
								ctor: '::',
								_0: '#1fab89',
								_1: {
									ctor: '::',
									_0: '#aea1ea',
									_1: {
										ctor: '::',
										_0: '#ebe9f6',
										_1: {
											ctor: '::',
											_0: '#ffce3e',
											_1: {
												ctor: '::',
												_0: '#ff4D4D',
												_1: {
													ctor: '::',
													_0: '#ff5200',
													_1: {
														ctor: '::',
														_0: '#ebe9f6',
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}),
	_1: _user$project$Example$getSchools
};
var _user$project$Example$update = F2(
	function (msg, model) {
		var _p8 = msg;
		switch (_p8.ctor) {
			case 'NoOp':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'DebugMessage':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{debug: _p8._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'FetchSchools':
				return {ctor: '_Tuple2', _0: model, _1: _user$project$Example$getSchools};
			case 'NewSchools':
				if (_p8._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{schools: _p8._0._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								debug: _elm_lang$core$Basics$toString(_p8._0._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'SelectSchool':
				var maybeSchool = _elm_lang$core$List$head(
					A2(
						_elm_lang$core$List$filter,
						function (m) {
							return _elm_lang$core$Native_Utils.eq(m.name, _p8._0);
						},
						model.schools));
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedSchool: maybeSchool}),
					_1: function () {
						var _p9 = maybeSchool;
						if (_p9.ctor === 'Nothing') {
							return _elm_lang$core$Platform_Cmd$none;
						} else {
							return _user$project$Example$getClasses(_p9._0);
						}
					}()
				};
			case 'FetchClasses':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: function () {
						var _p10 = model.selectedSchool;
						if (_p10.ctor === 'Nothing') {
							return _elm_lang$core$Platform_Cmd$none;
						} else {
							return _user$project$Example$getClasses(_p10._0);
						}
					}()
				};
			case 'NewClasses':
				if (_p8._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{schoolClasses: _p8._0._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								debug: _elm_lang$core$Basics$toString(_p8._0._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'SelectSchoolClass':
				var maybeSchoolClass = _elm_lang$core$List$head(
					A2(
						_elm_lang$core$List$filter,
						function (m) {
							return _elm_lang$core$Native_Utils.eq(m.name, _p8._0);
						},
						model.schoolClasses));
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedSchoolClass: maybeSchoolClass}),
					_1: function () {
						var _p11 = maybeSchoolClass;
						if (_p11.ctor === 'Nothing') {
							return _elm_lang$core$Platform_Cmd$none;
						} else {
							return _user$project$Example$getStudents(_p11._0);
						}
					}()
				};
			case 'FetchStudents':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: function () {
						var _p12 = model.selectedSchoolClass;
						if (_p12.ctor === 'Nothing') {
							return _elm_lang$core$Platform_Cmd$none;
						} else {
							return _user$project$Example$getStudents(_p12._0);
						}
					}()
				};
			case 'NewStudents':
				if (_p8._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{students: _p8._0._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								debug: _elm_lang$core$Basics$toString(_p8._0._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'SelectNumberOfGroups':
				var _p13 = _p8._0;
				var groups = A4(
					_user$project$Example$divideStudentsFixedAmountOfGroups,
					model.colors,
					1,
					_elm_lang$core$Basics$toFloat(_p13),
					model.students);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{groups: groups, numberOfGroups: _p13}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SelectMinStudentsInGroup':
				var numberOfGroups = (_elm_lang$core$List$length(model.students) / _p8._0) | 0;
				var groups = A4(
					_user$project$Example$divideStudentsFixedAmountOfGroups,
					model.colors,
					1,
					_elm_lang$core$Basics$toFloat(numberOfGroups),
					model.students);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{groups: groups, numberOfGroups: numberOfGroups}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SelectMaxStudentsInGroup':
				var numberOfGroups = _elm_lang$core$Basics$ceiling(
					_elm_lang$core$Basics$toFloat(
						_elm_lang$core$List$length(model.students)) / _elm_lang$core$Basics$toFloat(_p8._0));
				var groups = A4(
					_user$project$Example$divideStudentsFixedAmountOfGroups,
					model.colors,
					1,
					_elm_lang$core$Basics$toFloat(numberOfGroups),
					model.students);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{groups: groups, numberOfGroups: numberOfGroups}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ToggleMatrix':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{matrix: _p8._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'RandomizeGroups':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(
						_elm_lang$core$Random$generate,
						_user$project$Example$AssignRandomizedGroup,
						_elm_community$random_extra$Random_List$shuffle(model.students))
				};
			case 'AssignRandomizedGroup':
				var groups = A4(
					_user$project$Example$divideStudentsFixedAmountOfGroups,
					model.colors,
					1,
					_elm_lang$core$Basics$toFloat(model.numberOfGroups),
					_p8._0);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{groups: groups}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'RemoveStudent':
				var students = A2(
					_elm_lang$core$List$filter,
					function (std) {
						return !_elm_lang$core$Native_Utils.eq(_p8._0, std);
					},
					model.students);
				var groups = A4(
					_user$project$Example$divideStudentsFixedAmountOfGroups,
					model.colors,
					1,
					_elm_lang$core$Basics$toFloat(model.numberOfGroups),
					students);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{students: students, groups: groups}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Example$log(_p8._0)
				};
		}
	});
var _user$project$Example$FetchSchools = {ctor: 'FetchSchools'};
var _user$project$Example$DebugMessage = function (a) {
	return {ctor: 'DebugMessage', _0: a};
};
var _user$project$Example$customHandler = F2(
	function (message, input) {
		var _p14 = _elm_lang$core$String$toInt(input);
		if (_p14.ctor === 'Err') {
			return _user$project$Example$DebugMessage(_p14._0);
		} else {
			return message(_p14._0);
		}
	});
var _user$project$Example$view = function (model) {
	return A2(
		_rundis$elm_bootstrap$Bootstrap_Grid$container,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _rundis$elm_bootstrap$Bootstrap_CDN$stylesheet,
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$nav,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('navbar navbar-inverse navbar-fixed-top'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'background-color', _1: 'lightblue'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$h1,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('text-center'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Welcome to the grouper utility'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_rundis$elm_bootstrap$Bootstrap_Grid$row,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: A2(
								_rundis$elm_bootstrap$Bootstrap_Grid$col,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(
										_rundis$elm_bootstrap$Bootstrap_Button$button,
										{
											ctor: '::',
											_0: _rundis$elm_bootstrap$Bootstrap_Button$attrs(
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onClick(
														_user$project$Example$Log('hello')),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('log'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_rundis$elm_bootstrap$Bootstrap_Form$label,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Select school'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_rundis$elm_bootstrap$Bootstrap_Form_Select$custom,
												{
													ctor: '::',
													_0: _rundis$elm_bootstrap$Bootstrap_Form_Select$onInput(_user$project$Example$SelectSchool),
													_1: {ctor: '[]'}
												},
												A2(_elm_lang$core$List$map, _user$project$Example$schoolSelect, model.schools)),
											_1: {
												ctor: '::',
												_0: A2(
													_rundis$elm_bootstrap$Bootstrap_Form$label,
													{ctor: '[]'},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Select class'),
														_1: {ctor: '[]'}
													}),
												_1: {
													ctor: '::',
													_0: A2(
														_rundis$elm_bootstrap$Bootstrap_Form_Select$custom,
														{
															ctor: '::',
															_0: _rundis$elm_bootstrap$Bootstrap_Form_Select$onInput(_user$project$Example$SelectSchoolClass),
															_1: {ctor: '[]'}
														},
														A2(_elm_lang$core$List$map, _user$project$Example$schoolClassSelect, model.schoolClasses)),
													_1: {
														ctor: '::',
														_0: A2(
															_rundis$elm_bootstrap$Bootstrap_Form$label,
															{ctor: '[]'},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text('Number of groups'),
																_1: {ctor: '[]'}
															}),
														_1: {
															ctor: '::',
															_0: A2(
																_rundis$elm_bootstrap$Bootstrap_Form_Select$custom,
																{
																	ctor: '::',
																	_0: _rundis$elm_bootstrap$Bootstrap_Form_Select$onInput(
																		_user$project$Example$customHandler(_user$project$Example$SelectNumberOfGroups)),
																	_1: {ctor: '[]'}
																},
																A2(
																	_elm_lang$core$List$map,
																	_user$project$Example$numberSelect,
																	A2(_elm_lang$core$List$range, 1, 10))),
															_1: {
																ctor: '::',
																_0: A2(
																	_rundis$elm_bootstrap$Bootstrap_Form$label,
																	{ctor: '[]'},
																	{
																		ctor: '::',
																		_0: _elm_lang$html$Html$text('Max Students In Group'),
																		_1: {ctor: '[]'}
																	}),
																_1: {
																	ctor: '::',
																	_0: A2(
																		_rundis$elm_bootstrap$Bootstrap_Form_Select$custom,
																		{
																			ctor: '::',
																			_0: _rundis$elm_bootstrap$Bootstrap_Form_Select$onInput(
																				_user$project$Example$customHandler(_user$project$Example$SelectMaxStudentsInGroup)),
																			_1: {ctor: '[]'}
																		},
																		A2(
																			_elm_lang$core$List$map,
																			_user$project$Example$numberSelect,
																			A2(_elm_lang$core$List$range, 1, 10))),
																	_1: {
																		ctor: '::',
																		_0: A2(
																			_rundis$elm_bootstrap$Bootstrap_Form$label,
																			{ctor: '[]'},
																			{
																				ctor: '::',
																				_0: _elm_lang$html$Html$text('Min Students In Group'),
																				_1: {ctor: '[]'}
																			}),
																		_1: {
																			ctor: '::',
																			_0: A2(
																				_rundis$elm_bootstrap$Bootstrap_Form_Select$custom,
																				{
																					ctor: '::',
																					_0: _rundis$elm_bootstrap$Bootstrap_Form_Select$onInput(
																						_user$project$Example$customHandler(_user$project$Example$SelectMinStudentsInGroup)),
																					_1: {ctor: '[]'}
																				},
																				A2(
																					_elm_lang$core$List$map,
																					_user$project$Example$numberSelect,
																					A2(_elm_lang$core$List$range, 1, 10))),
																			_1: {
																				ctor: '::',
																				_0: A2(
																					_elm_lang$html$Html$hr,
																					{ctor: '[]'},
																					{ctor: '[]'}),
																				_1: {
																					ctor: '::',
																					_0: A2(
																						_rundis$elm_bootstrap$Bootstrap_Grid$row,
																						{ctor: '[]'},
																						{
																							ctor: '::',
																							_0: A2(
																								_rundis$elm_bootstrap$Bootstrap_Grid$col,
																								{ctor: '[]'},
																								{
																									ctor: '::',
																									_0: A2(
																										_rundis$elm_bootstrap$Bootstrap_Form_Checkbox$custom,
																										{
																											ctor: '::',
																											_0: _rundis$elm_bootstrap$Bootstrap_Form_Checkbox$onCheck(_user$project$Example$ToggleMatrix),
																											_1: {ctor: '[]'}
																										},
																										'Toggle matrix'),
																									_1: {ctor: '[]'}
																								}),
																							_1: {
																								ctor: '::',
																								_0: A2(
																									_rundis$elm_bootstrap$Bootstrap_Grid$col,
																									{ctor: '[]'},
																									{
																										ctor: '::',
																										_0: A2(
																											_rundis$elm_bootstrap$Bootstrap_Button$button,
																											{
																												ctor: '::',
																												_0: _rundis$elm_bootstrap$Bootstrap_Button$secondary,
																												_1: {
																													ctor: '::',
																													_0: _rundis$elm_bootstrap$Bootstrap_Button$attrs(
																														{
																															ctor: '::',
																															_0: _elm_lang$html$Html_Events$onClick(_user$project$Example$RandomizeGroups),
																															_1: {ctor: '[]'}
																														}),
																													_1: {ctor: '[]'}
																												}
																											},
																											{
																												ctor: '::',
																												_0: _elm_lang$html$Html$text('Shuffle groups'),
																												_1: {ctor: '[]'}
																											}),
																										_1: {ctor: '[]'}
																									}),
																								_1: {ctor: '[]'}
																							}
																						}),
																					_1: {
																						ctor: '::',
																						_0: A2(
																							_elm_lang$html$Html$hr,
																							{ctor: '[]'},
																							{ctor: '[]'}),
																						_1: {
																							ctor: '::',
																							_0: _user$project$Example$fullClassView(model),
																							_1: {ctor: '[]'}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_rundis$elm_bootstrap$Bootstrap_Grid$col,
									{
										ctor: '::',
										_0: _rundis$elm_bootstrap$Bootstrap_Grid_Col$sm3,
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: A2(
											_rundis$elm_bootstrap$Bootstrap_Form$label,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text('Students'),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: _user$project$Example$studentList(model.students),
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Example$main = _elm_lang$html$Html$program(
	{init: _user$project$Example$init, view: _user$project$Example$view, update: _user$project$Example$update, subscriptions: _user$project$Example$subscriptions})();
var _user$project$Example$NoOp = {ctor: 'NoOp'};
