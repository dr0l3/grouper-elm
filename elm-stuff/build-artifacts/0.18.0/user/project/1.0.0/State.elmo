var _user$project$State$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'NoOp':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'DebugMessage':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{debug: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'FetchSchools':
				return {ctor: '_Tuple2', _0: model, _1: _user$project$Rest$getSchools};
			case 'NewSchools':
				if (_p0._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{schools: _p0._0._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								debug: _elm_lang$core$Basics$toString(_p0._0._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'SelectSchool':
				var maybeSchool = _elm_lang$core$List$head(
					A2(
						_elm_lang$core$List$filter,
						function (m) {
							return _elm_lang$core$Native_Utils.eq(m.name, _p0._0);
						},
						model.schools));
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedSchool: maybeSchool}),
					_1: function () {
						var _p1 = maybeSchool;
						if (_p1.ctor === 'Nothing') {
							return _elm_lang$core$Platform_Cmd$none;
						} else {
							return _user$project$Rest$getClasses(_p1._0);
						}
					}()
				};
			case 'FetchClasses':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: function () {
						var _p2 = model.selectedSchool;
						if (_p2.ctor === 'Nothing') {
							return _elm_lang$core$Platform_Cmd$none;
						} else {
							return _user$project$Rest$getClasses(_p2._0);
						}
					}()
				};
			case 'NewClasses':
				if (_p0._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{schoolClasses: _p0._0._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								debug: _elm_lang$core$Basics$toString(_p0._0._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'SelectSchoolClass':
				var maybeSchoolClass = _elm_lang$core$List$head(
					A2(
						_elm_lang$core$List$filter,
						function (m) {
							return _elm_lang$core$Native_Utils.eq(m.name, _p0._0);
						},
						model.schoolClasses));
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{selectedSchoolClass: maybeSchoolClass}),
					_1: function () {
						var _p3 = maybeSchoolClass;
						if (_p3.ctor === 'Nothing') {
							return _elm_lang$core$Platform_Cmd$none;
						} else {
							return _user$project$Rest$getStudents(_p3._0);
						}
					}()
				};
			case 'FetchStudents':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: function () {
						var _p4 = model.selectedSchoolClass;
						if (_p4.ctor === 'Nothing') {
							return _elm_lang$core$Platform_Cmd$none;
						} else {
							return _user$project$Rest$getStudents(_p4._0);
						}
					}()
				};
			case 'NewStudents':
				if (_p0._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{students: _p0._0._0}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								debug: _elm_lang$core$Basics$toString(_p0._0._0)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				}
			case 'SelectNumberOfGroups':
				var _p5 = _p0._0;
				var groups = A4(
					_user$project$Util_Util$divideStudentsFixedAmountOfGroups,
					model.colors,
					1,
					_elm_lang$core$Basics$toFloat(_p5),
					model.students);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{groups: groups, numberOfGroups: _p5}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SelectMinStudentsInGroup':
				var numberOfGroups = (_elm_lang$core$List$length(model.students) / _p0._0) | 0;
				var groups = A4(
					_user$project$Util_Util$divideStudentsFixedAmountOfGroups,
					model.colors,
					1,
					_elm_lang$core$Basics$toFloat(numberOfGroups),
					model.students);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{groups: groups, numberOfGroups: numberOfGroups}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SelectMaxStudentsInGroup':
				var numberOfGroups = _elm_lang$core$Basics$ceiling(
					_elm_lang$core$Basics$toFloat(
						_elm_lang$core$List$length(model.students)) / _elm_lang$core$Basics$toFloat(_p0._0));
				var groups = A4(
					_user$project$Util_Util$divideStudentsFixedAmountOfGroups,
					model.colors,
					1,
					_elm_lang$core$Basics$toFloat(numberOfGroups),
					model.students);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{groups: groups, numberOfGroups: numberOfGroups}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ToggleMatrix':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{matrix: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'RandomizeGroups':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(
						_elm_lang$core$Random$generate,
						_user$project$Types$AssignRandomizedGroup,
						_elm_community$random_extra$Random_List$shuffle(model.students))
				};
			case 'AssignRandomizedGroup':
				var groups = A4(
					_user$project$Util_Util$divideStudentsFixedAmountOfGroups,
					model.colors,
					1,
					_elm_lang$core$Basics$toFloat(model.numberOfGroups),
					_p0._0);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{groups: groups}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'RemoveStudent':
				var _p6 = _p0._0;
				var removedStudents = A2(
					_elm_lang$core$Basics_ops['++'],
					model.removedStudents,
					{
						ctor: '::',
						_0: _p6,
						_1: {ctor: '[]'}
					});
				var students = A2(
					_elm_lang$core$List$filter,
					function (std) {
						return !_elm_lang$core$Native_Utils.eq(_p6, std);
					},
					model.students);
				var groups = A4(
					_user$project$Util_Util$divideStudentsFixedAmountOfGroups,
					model.colors,
					1,
					_elm_lang$core$Basics$toFloat(model.numberOfGroups),
					students);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{students: students, groups: groups, removedStudents: removedStudents}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'AddStudent':
				var _p7 = _p0._0;
				var removedStudents = A2(
					_elm_lang$core$List$filter,
					function (std) {
						return !_elm_lang$core$Native_Utils.eq(_p7, std);
					},
					model.removedStudents);
				var students = A2(
					_elm_lang$core$Basics_ops['++'],
					model.students,
					{
						ctor: '::',
						_0: _p7,
						_1: {ctor: '[]'}
					});
				var groups = A4(
					_user$project$Util_Util$divideStudentsFixedAmountOfGroups,
					model.colors,
					1,
					_elm_lang$core$Basics$toFloat(model.numberOfGroups),
					students);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{students: students, removedStudents: removedStudents, groups: groups}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Move':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							movingStudent: _elm_lang$core$Maybe$Just(_p0._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'DropOn':
				var groups = function () {
					var _p8 = model.movingStudent;
					if (_p8.ctor === 'Nothing') {
						return model.groups;
					} else {
						return A2(
							_elm_lang$core$List$map,
							function (group) {
								return _elm_lang$core$Native_Utils.update(
									group,
									{
										students: A2(
											_elm_lang$core$List$filter,
											function (stud) {
												return !_elm_lang$core$Native_Utils.eq(stud, _p8._0);
											},
											group.students)
									});
							},
							model.groups);
					}
				}();
				var addedGroup = function () {
					var _p9 = model.movingStudent;
					if (_p9.ctor === 'Nothing') {
						return model.groups;
					} else {
						return A2(
							_elm_lang$core$List$map,
							function (gr) {
								return _elm_lang$core$Native_Utils.eq(_p0._0.number, gr.number) ? _elm_lang$core$Native_Utils.update(
									gr,
									{
										students: {ctor: '::', _0: _p9._0, _1: gr.students}
									}) : gr;
							},
							groups);
					}
				}();
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{movingStudent: _elm_lang$core$Maybe$Nothing, groups: addedGroup}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'CancelMove':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{movingStudent: _elm_lang$core$Maybe$Nothing}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Export':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{exportVisible: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'PickRandomStudent':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{randomStudentVisible: _p0._0}),
					_1: A2(
						_elm_lang$core$Random$generate,
						_user$project$Types$SetRandomStudent,
						_elm_community$random_extra$Random_List$choose(model.students))
				};
			case 'SetRandomStudent':
				var maybeStudent = _elm_lang$core$Tuple$first(_p0._0);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{randomStudent: maybeStudent}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ToggleTableHeader':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{showTableHeaderModal: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ToggleColors':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{showColors: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				var _p13 = _p0._0;
				var groups = function () {
					var _p10 = model.movingStudent;
					if (_p10.ctor === 'Nothing') {
						return model.groups;
					} else {
						var _p12 = _p10._0;
						return A2(
							_elm_lang$core$List$map,
							function (g) {
								return _elm_lang$core$Native_Utils.update(
									g,
									{
										students: A2(
											_elm_lang$core$List$map,
											function (s) {
												var _p11 = A3(_user$project$Util_Util$twoWayComparison, s, _p12, _p13);
												switch (_p11.ctor) {
													case 'First':
														return _p13;
													case 'Second':
														return _p12;
													default:
														return s;
												}
											},
											g.students)
									});
							},
							model.groups);
					}
				}();
				var something = {ctor: '[]'};
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{groups: groups, movingStudent: _elm_lang$core$Maybe$Nothing}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$State$init = {
	ctor: '_Tuple2',
	_0: _user$project$Types$Model(_elm_lang$core$Maybe$Nothing)(1)(_elm_lang$core$Maybe$Nothing)(_elm_lang$core$Maybe$Nothing)('')(false)(_rundis$elm_bootstrap$Bootstrap_Modal$hiddenState)(_rundis$elm_bootstrap$Bootstrap_Modal$hiddenState)(_elm_lang$core$Maybe$Nothing)(true)(true)(
		{ctor: '[]'})(
		{ctor: '[]'})(
		{ctor: '[]'})(
		{ctor: '[]'})(
		{ctor: '[]'})(
		{
			ctor: '::',
			_0: '#f98a02',
			_1: {
				ctor: '::',
				_0: '#2980b9',
				_1: {
					ctor: '::',
					_0: '#a2d5f2',
					_1: {
						ctor: '::',
						_0: '#127228',
						_1: {
							ctor: '::',
							_0: '#aea1ea',
							_1: {
								ctor: '::',
								_0: '#ffce3e',
								_1: {
									ctor: '::',
									_0: '#e22222',
									_1: {
										ctor: '::',
										_0: '#29c6cd',
										_1: {
											ctor: '::',
											_0: '#76f168',
											_1: {
												ctor: '::',
												_0: '#824a78',
												_1: {
													ctor: '::',
													_0: '#776d54',
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}),
	_1: _user$project$Rest$getSchools
};
